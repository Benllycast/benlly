/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.udec.device;

import com.udec.device.serial.CommManager;
import com.udec.device.serial.SerialConfigDialog;
import com.udec.model.ConfiguracionManager;
import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import jssc.SerialPortException;
import jssc.SerialPortTimeoutException;

/**
 *
 * @author windows7
 */
public class SerialDeviceConfigForm extends javax.swing.JInternalFrame {

    ConfigurationDeviceManager manager = null;

    /**
     * Creates new form SerialDeviceConfigForm
     */
    public SerialDeviceConfigForm() {
        initComponents();
        //this.desactivarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnConfCOM = new javax.swing.JButton();
        btnTestConexion = new javax.swing.JButton();
        lblID = new javax.swing.JLabel();
        btnSetID = new javax.swing.JButton();
        txtID = new javax.swing.JFormattedTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnSetFechaHora = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtHoraFecha = new javax.swing.JTextField();
        txtFecha = new javax.swing.JFormattedTextField();
        txtHora = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        txtIdActual = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        chkAD_REV = new javax.swing.JCheckBox();
        chkAD_VEL = new javax.swing.JCheckBox();
        chkCCP_REV = new javax.swing.JCheckBox();
        chkCCP_VEL = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnSetCanal = new javax.swing.JButton();
        lblStateConexion = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Configuracion de dispositivo");

        btnConfCOM.setText("CONFIGURAR PUERTO SERIAL");
        btnConfCOM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfCOMActionPerformed(evt);
            }
        });

        btnTestConexion.setText("TEST CONEXION");
        btnTestConexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestConexionActionPerformed(evt);
            }
        });

        lblID.setText("ID ");

        btnSetID.setText("Configurar ID");
        btnSetID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetIDActionPerformed(evt);
            }
        });

        txtID.setColumns(6);
        txtID.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jLabel1.setText("Conexion de Dispositivo");

        jLabel2.setText("ID de Dispositivo");

        jLabel3.setText("Fecha y Hora");

        jLabel4.setText("Fecha (dd/mm/aa):");

        jLabel5.setText("Hora (hh:mm:ss):");

        btnSetFechaHora.setText("Configurar Hora y Fecha");
        btnSetFechaHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetFechaHoraActionPerformed(evt);
            }
        });

        jLabel6.setText("Fecha y hora de Dispositivo:");

        txtHoraFecha.setEditable(false);
        txtHoraFecha.setColumns(20);

        txtFecha.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yy"))));

        txtHora.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("HH:mm:ss"))));

        jLabel7.setText("ID actual");

        txtIdActual.setEditable(false);
        txtIdActual.setColumns(20);

        jLabel8.setText("Canales de Entrada");

        chkAD_REV.setText("AD REV");

        chkAD_VEL.setText("AD VEL");

        chkCCP_REV.setText("CCP REV");

        chkCCP_VEL.setText("CCP VEL");

        jLabel9.setText("Entradas Analogicas:");

        jLabel10.setText("Entradas Digitales:");

        btnSetCanal.setText("Configurar Entradas");
        btnSetCanal.setMaximumSize(new java.awt.Dimension(153, 23));
        btnSetCanal.setMinimumSize(new java.awt.Dimension(153, 23));
        btnSetCanal.setPreferredSize(new java.awt.Dimension(153, 23));
        btnSetCanal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetCanalActionPerformed(evt);
            }
        });

        lblStateConexion.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblStateConexion.setText("NO HAY DISPOSITIVO CONECTADO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdActual, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSetID))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkAD_REV)
                            .addComponent(chkCCP_REV))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkCCP_VEL)
                            .addComponent(chkAD_VEL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSetCanal, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                    .addComponent(txtHora))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtHoraFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnSetFechaHora)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnConfCOM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnTestConexion)
                                .addGap(18, 18, 18)
                                .addComponent(lblStateConexion)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfCOM)
                    .addComponent(btnTestConexion)
                    .addComponent(lblStateConexion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblID)
                    .addComponent(btnSetID)
                    .addComponent(jLabel7)
                    .addComponent(txtIdActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtHoraFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSetFechaHora)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkAD_VEL)
                    .addComponent(chkAD_REV)
                    .addComponent(jLabel9)
                    .addComponent(btnSetCanal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(chkCCP_VEL)
                    .addComponent(chkCCP_REV))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfCOMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfCOMActionPerformed
        // TODO add your handling code here:
        SerialConfigDialog dialog;
        dialog = new SerialConfigDialog(null, true);
        dialog.setVisible(true);
        try {
            if (CommManager.isCommReady()) {
                this.manager = new ConfigurationDeviceManager(CommManager.getComm());
                //this.activarCampos();
                this.getDeviceData();
            }
        } catch (Exception ex) {
            Logger.getLogger(SerialDeviceConfigForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnConfCOMActionPerformed

    private void btnTestConexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestConexionActionPerformed
        // TODO add your handling code here:
        this.testConexionDialog();
    }//GEN-LAST:event_btnTestConexionActionPerformed

    private void btnSetFechaHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetFechaHoraActionPerformed
        try {
            // TODO add your handling code here:
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
            String fechaHora = txtFecha.getText() + " " + txtHora.getText();
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(dateFormat.parse(fechaHora));
            int hora = calendar.get(Calendar.HOUR_OF_DAY);
            int min = calendar.get(Calendar.MINUTE);
            int seg = calendar.get(Calendar.SECOND);
            int dia = calendar.get(Calendar.DAY_OF_MONTH);
            int mes = calendar.get(Calendar.MONTH) + 1;
            int anio = (calendar.get(Calendar.YEAR) % 1000) % 100;

            this.setHoraFecha(dia, mes, anio, hora, min, seg);
            Thread.sleep(1000);
            this.getHoraFecha();
        } catch (ParseException ex) {
            Logger.getLogger(SerialDeviceConfigForm.class.getName()).log(Level.SEVERE, "Error a parsear la fecha", ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(SerialDeviceConfigForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSetFechaHoraActionPerformed

    private void btnSetCanalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetCanalActionPerformed
        // TODO add your handling code here:
        HashMap<String, Boolean> map = new HashMap<>();
        map.put("CCP_VEL", chkCCP_VEL.isSelected());
        map.put("CCP_REV", chkCCP_REV.isSelected());
        map.put("CCP_BIT", true);
        map.put("AD_REV", chkAD_REV.isSelected());
        map.put("AD_VEL", chkAD_VEL.isSelected());
        this.setCanal(map);
    }//GEN-LAST:event_btnSetCanalActionPerformed

    private void btnSetIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetIDActionPerformed
        // TODO add your handling code here:
        int ID = Integer.parseInt(txtID.getText());
        this.setID(ID);
    }//GEN-LAST:event_btnSetIDActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfCOM;
    private javax.swing.JButton btnSetCanal;
    private javax.swing.JButton btnSetFechaHora;
    private javax.swing.JButton btnSetID;
    private javax.swing.JButton btnTestConexion;
    private javax.swing.JCheckBox chkAD_REV;
    private javax.swing.JCheckBox chkAD_VEL;
    private javax.swing.JCheckBox chkCCP_REV;
    private javax.swing.JCheckBox chkCCP_VEL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblStateConexion;
    private javax.swing.JFormattedTextField txtFecha;
    private javax.swing.JFormattedTextField txtHora;
    private javax.swing.JTextField txtHoraFecha;
    private javax.swing.JFormattedTextField txtID;
    private javax.swing.JTextField txtIdActual;
    // End of variables declaration//GEN-END:variables

    private void activarCampos() {
        txtID.setEnabled(true);
        txtHora.setEnabled(true);
        txtFecha.setEnabled(true);
        btnTestConexion.setEnabled(true);
        btnSetCanal.setEnabled(true);
        btnSetFechaHora.setEnabled(true);
        btnSetID.setEnabled(true);
        chkAD_REV.setEnabled(true);
        chkAD_VEL.setEnabled(true);
        chkCCP_REV.setEnabled(true);
        chkCCP_VEL.setEnabled(true);
    }

    private void desactivarCampos() {
        txtID.setEnabled(false);
        txtHora.setEnabled(false);
        txtFecha.setEnabled(false);
        //btnTestConexion.setEnabled(false);
        btnSetCanal.setEnabled(false);
        btnSetFechaHora.setEnabled(false);
        btnSetID.setEnabled(false);
        chkAD_REV.setEnabled(false);
        chkAD_VEL.setEnabled(false);
        chkCCP_REV.setEnabled(false);
        chkCCP_VEL.setEnabled(false);
    }

    private void getDeviceData() {
        try {
            if (this.manager.test()) {
                this.getHoraFecha();
                Thread.sleep(1000);
                this.getDeviceID();
                Thread.sleep(1000);
                this.getDeviceChanelActive();
            }
        } catch (SerialPortTimeoutException | InterruptedException ex) {
            error("Error al adquirir datos", ex);
        }
    }

    private void testConexionDialog() {
        try {
            // TODO add your handling code here:
            if (this.manager.test()) {
                JOptionPane.showMessageDialog(this, "Conexion OK", "Conexion con el dispositivo", JOptionPane.INFORMATION_MESSAGE);
                this.activarCampos();
                this.setStateConexion(1);
            } else {
                JOptionPane.showMessageDialog(this, "Conexion Fallida", "Conexion con el dispositivo", JOptionPane.ERROR_MESSAGE);
                this.desactivarCampos();
                this.setStateConexion(0);
            }
        } catch (SerialPortTimeoutException ex) {
            error("prueba de conexion", ex);
        }
    }

    private void getHoraFecha() {
        try {
            // TODO add your handling code here:
            HashMap<String, Integer> fecha = this.manager.getFecha();
            if (fecha != null) {
                int dia = fecha.get("dia");
                int mes = fecha.get("mes");
                int anio = fecha.get("anio");
                int horas = fecha.get("hora");
                int minutos = fecha.get("min");
                int segundos = fecha.get("seg");

                String strDia = (dia > 9 ? "" + dia : "0" + dia);
                String strMes = (mes > 9 ? "" + mes : "0" + mes);
                String strAnio = (anio > 9 ? "" + anio : "0" + anio);

                String strHoras = (horas > 9 ? "" + horas : "0" + horas);
                String strMinutos = (minutos > 9 ? "" + minutos : "0" + minutos);
                String strSegundos = (segundos > 9 ? "" + segundos : "0" + segundos);

                String strHoraFecha = "" + strDia + "/" + strMes + "/" + strAnio + " " + strHoras + ":" + strMinutos + ":" + strSegundos;
                this.txtHoraFecha.setText(strHoraFecha);

            } else {
                this.txtHoraFecha.setText("**/**/** **:**:**");

            }
        } catch (SerialPortException | SerialPortTimeoutException ex) {
            error("transmicion de fecha", ex);
        }
    }

    private void getDeviceID() {
        try {
            long ID = manager.getID();
            this.txtIdActual.setText(Long.toString(ID));

        } catch (SerialPortException | SerialPortTimeoutException ex) {
            error("Transferencia de ID", ex);
        }
    }

    private void getDeviceChanelActive() {
        try {
            HashMap<String, Boolean> canales = this.manager.getCanal();
            if (canales != null) {
                this.chkAD_REV.setSelected(canales.get("AD_REV"));
                this.chkAD_VEL.setSelected(canales.get("AD_VEL"));
                this.chkCCP_REV.setSelected(canales.get("CCP_REV"));
                this.chkCCP_VEL.setSelected(canales.get("CCP_VEL"));
            }
        } catch (SerialPortException | SerialPortTimeoutException ex) {
            error("transmicion de datos", ex);
        }
    }

    private void setStateConexion(final int state) {
        switch (state) {
            case 1:
                this.lblStateConexion.setForeground(Color.GREEN);
                this.lblStateConexion.setText(ConfiguracionManager.getString("serial.deviceConfig.stateConexion.ok"));
                break;
            case 0:
                this.lblStateConexion.setForeground(Color.RED);
                this.lblStateConexion.setText(ConfiguracionManager.getString("serial.deviceConfig.stateConexion.fail"));
                break;
            default:
                this.lblStateConexion.setForeground(Color.BLACK);
                this.lblStateConexion.setText(ConfiguracionManager.getString("serial.deviceConfig.stateConexion.noConect"));
                break;
        }
    }

    private void setHoraFecha(int dia, int mes, int anio, int hora, int min, int seg) {
        int vic = 0;
        try {
            if (manager.setFecha(dia, mes, anio, vic, hora, min, seg)) {
                JOptionPane.showMessageDialog(this, "fecha configurada", null, JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SerialPortException | SerialPortTimeoutException ex) {
            error("transmicion de fecha", ex);
        }
    }

    private void setCanal(HashMap<String, Boolean> map) {
        try {
            if (manager.setCanal(map)) {
                JOptionPane.showMessageDialog(this, "Caneles configurados", null, JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SerialPortException | SerialPortTimeoutException ex) {
            error("Error de transmision de canales", ex);
        }
    }

    private void error(String mensaje, Exception ex) {
        mensaje = (mensaje == null) ? "Error Desconocido" : mensaje;
        Logger.getLogger(SerialConfigDialog.class.getName()).log(Level.SEVERE, mensaje, ex);
        this.desactivarCampos();
        setStateConexion(0);
        JOptionPane.showMessageDialog(this, "ERROR: " + mensaje, null, JOptionPane.ERROR_MESSAGE);
    }

    private void setID(int ID) {
        try {
            if(this.manager.setID(ID)){
                JOptionPane.showMessageDialog(null, "ID configurado", title, JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SerialPortException | SerialPortTimeoutException ex) {
            error("Transmicion de ID", ex);
        }
    }

}
